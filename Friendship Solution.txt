Problem statement :-
Table: Friendship

+-------------+------+
| Column Name | Type |
+-------------+------+
| user1_id    | int  |
| user2_id    | int  |
+-------------+------+
(user1_id, user2_id) is the primary key for this table.
Each row of this table indicates that the users user1_id and user2_id are friends.
Note that user1_id < user2_id.

A friendship between a pair of friends x and y is strong if x and y have at least three common friends.

Write an SQL query to find all the strong friendships.

Note that the result table should not contain duplicates with user1_id < user2_id.

Return the result table in any order.

Solution :-
SELECT user1_id, user2_id, COUNT(friend1) AS common_friend
FROM (
    SELECT
        o.user1_id,
        o.user2_id,
        (CASE WHEN o.user1_id = x.user1_id
        THEN x.user2_id ELSE x.user1_id END) AS friend1,
        (CASE WHEN o.user2_id = y.user1_id
        THEN y.user2_id ELSE y.user1_id END) AS friend2
    FROM friendship o
    JOIN friendship x
    ON o.user1_id = x.user1_id OR o.user1_id = x.user2_id
    JOIN friendship y
    ON o.user2_id = y.user1_id OR o.user2_id = y.user2_id
) cte
WHERE friend1 = friend2
GROUP BY user1_id, user2_id
HAVING COUNT(friend1) >= 3
ORDER BY user1_id, user2_id DESC