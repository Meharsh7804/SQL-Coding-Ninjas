Problem statement :-
Table: Customers
+---------------+---------+
| Column Name   | Type    |
+---------------+---------+
| customer_id   | int     |
| name          | varchar |
+---------------+---------+
customer_id is the primary key for this table.
This table contains information about the customers.


Table: Orders
+---------------+---------+
| Column Name   | Type    |
+---------------+---------+
| order_id      | int     |
| order_date    | date    |
| customer_id   | int     |
| product_id    | int     |
+---------------+---------+
order_id is the primary key for this table.
This table contains information about the orders made by customer_id.
No customer will order the same product more than once in a single day.


Table: Products
+---------------+---------+
| Column Name   | Type    |
+---------------+---------+
| product_id    | int     |
| product_name  | varchar |
| price         | int     |
+---------------+---------+
product_id is the primary key for this table.
This table contains information about the products.

Write an SQL query to find the most frequently ordered product(s) for each customer and return your table order by consumer_id, otherwise your query will not be accepted.

The result table should have the product_id and product_name for each customer_id who ordered at least one order. Return the result table in any order.

Solution :-
WITH cte AS (
    select customer_id,product_id,COUNT(*) AS order_count
    from  Orders 
    group by customer_id,product_id
),
cte2 AS (
    select customer_id,product_id,order_count,
    Rank() over (Partition by customer_id order by order_count desc) AS rnk
    from cte
)
select  a.customer_id,a.product_id,b.product_name
from cte2 a inner join Products b ON a.product_id = b.product_id
where  a.rnk = 1
order by a.customer_id, a.product_id;